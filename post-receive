#!/bin/bash
#
# post-receive hook
#
# Add comments in the Jira tickets using Jira API.
# When the git push is received, every commit adds a comment depending on the Jira tickets found in the commit message.
# The Jira comment contains :
# - Branch name : SHA1 commit
# - Commit author : Commit date
# - Commit describe by tags
# - A link to your git service website of the commit if gitServiceRootUrl is not empty
#
# This file must be named post-receive, and be saved in the hook directory in a bare git repository.
# Run "chmod +x post-receive" to make it executable.
#
# Don't forget to change
# - Jira server urls
# - Jira id regex
# - Jira login
# - Jira password
# - git service url
#
#branchName="refs/heads/master"

jiraBeginUrl="http://jira.yourserver.com/rest/api/2/issue"
jiraEndUrl="comment"
jiraIdRegex="PFOANALYST-[0-9]{1,8}|HCS(|INT|ANALYST|PAFO|INFRA)-[0-9]{1,8}"

# Jira credentials
jiraLogin="git_user"
jiraPassword="git_user_password"

# Your Git service url like github, gogs, ...
# Don't forget to put "/" at the end of this url
gitServiceRootUrl="http://gitlab.local/root/testproject/commit/"

# Branches loop
# because it is possible to push more than one branch at a time with the "git push --all" command
while read oldrev newrev refname
do
    echo
    echo "--------------------------------------------------------"
    echo "Processing branch : $refname"

    #
    deletedBranch=false

    # --- Interpret
    # 0000->1234 (create)
    # 1234->2345 (update)
    # 2345->0000 (delete)
    if expr "$oldrev" : '0*$' >/dev/null
    then
      # Show all revisions exclusive to this new branch.
      echo >&2 "You have been working on a new branch"
      echo "--------------------------------------------------------"
      revisions=$newrev
    else
	    if expr "$newrev" : '0*$' >/dev/null
	    then
        echo >&2 "This branch has been deleted,"
        echo >&2 "no need to post a Jira comment"
        echo "--------------------------------------------------------"
  	    revisions=""
        deletedBranch=true
	    else
        # Branch update, show revisions not part of $oldrev.
        echo >&2 "The branch has been updated"
        echo "--------------------------------------------------------"
        revisions=$oldrev..$newrev
        echo "revisions" $revisions
	    fi
    fi

    # TODO : use function, not "if" condition
    if [ "$deletedBranch" = false ] ; then
      # We exclude commits which are already in others branches to avoid
      # to retrieve these commits again while merging
      otherBranches=$(git for-each-ref --format='%(refname)' refs/heads/ | grep -F -v $refname)

      # Commits loop in chronological order
      # For merge commits - find comment from all included branch commits for jiraIds search
      regex='master|\/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'
      if [[ $refname =~ $regex ]] ; then
          sha1Commits=$(git rev-parse --not $otherBranches | git rev-list --reverse --stdin $revisions)
          echo "master|release branch"
      else
          sha1Commits=$(git rev-parse --not $otherBranches | git rev-list --reverse --no-merges --stdin $revisions)
          echo "feature branch"
      fi
      for sha1Commit in $sha1Commits
      do
          echo
          echo "sha1 : $sha1Commit"

          # Get the commit information
          commitAuthorName=$(git show -s --format=%an $sha1Commit)
          commitAuthorEmail=$(git show -s --format=%ae $sha1Commit)
          commitDate=$(git show -s --format=%ci $sha1Commit)
          # The commit message
          commitMessage=$(git log --format=%B -n 1 $sha1Commit | sed ':a;N;$!ba;s/\n/ /g')
          commitMessage=$(echo $commitMessage | sed 's:\\: :g')
          jiraIdsFromMessage=$commitMessage
          buildNumber=$(git describe --tags $sha1Commit)
	  #echo $sha1Commit

	        parentCommitsString=$(git log --pretty=%P -n 1 $sha1Commit) #for merges commit
	        parentCommits=($parentCommitsString)
	        if [ ${#parentCommits[@]} -eq 2 ]
	        then
                echo "parentCommits: $parentCommitsString"
	         for mergedCommits in $(git rev-list ${parentCommits[0]}..${parentCommits[1]})
                do
                jiraIdsFromMessage="$jiraIdsFromMessage $(git log --format=%B -n 1 $mergedCommits | sed ':a;N;$!ba;s/\n/ /g')"
                done
	        fi

          # Jira comment build

          if [ ! -z "$gitServiceRootUrl" ];
          then
            jiraComment="*branch:* $refname\n*revision:* $buildNumber\n*commit:* $sha1Commit\n$gitServiceRootUrl$sha1Commit"
                        else
            jiraComment="$refname : $sha1Commit"
          fi
          jiraComment="$jiraComment\n*autor:* $commitAuthorName *add:* $commitDate\n\n*commitMessage:* $commitMessage"

          # Escaping characters
          jiraComment=$(echo $jiraComment | sed 's/\n/\\n/g')
          jiraComment=$(echo $jiraComment | sed 's/\b//g')
          jiraComment=$(echo $jiraComment | sed 's/\r/\\r/g')
          jiraComment=$(echo $jiraComment | sed 's/\t/\\t/g')
          jiraComment=$(echo $jiraComment | sed 's/"/\``/g')
          jiraComment=$(echo $jiraComment | sed "s/'/\\'/g")

          jiraIds=$(echo $jiraIdsFromMessage | grep -Po $jiraIdRegex | uniq)

          # Jira tickets loop
          for jiraId in ${jiraIds[@]}
          do
            echo "Processing Jira : $jiraId"

  	        # Uncomment to debug
            #echo "debug begin comment :"
            #echo
  	    echo "jiracom=$jiraComment" #>> /var/log/gitlab/post_hook.log
	    #echo "jiraurl=$jiraBeginUrl" #>> /var/log/gitlab/post_hook.log
	    #echo "jiraId=$jiraId" #>> /var/log/gitlab/post_hook.log
	    #echo "jiraEndUrl=$jiraEndUrl" #>> /var/log/gitlab/post_hook.log
	    echo "buildNumber=$buildNumber" #>> /var/log/gitlab/post_hook.log
            #echo
  	        #echo "debug end"

  	        # All errors will be ignored (/dev/null)
              curl --retry 2 --retry-max-time 5 -D- -u $jiraLogin:$jiraPassword -X POST --data "{\"body\": \"$jiraComment\"}" \
                -H "Content-Type: application/json" $jiraBeginUrl/$jiraId/$jiraEndUrl > /dev/null 2>&1
            echo "New Jira comment added"
          done
      done
    fi
done

echo
echo
echo "post-receive git hook : see you soon"
echo "--------------------------------------------------------"
echo

exit 0
